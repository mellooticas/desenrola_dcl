// Investiga√ß√£o profunda: Sistema de cria√ß√£o de miss√µes
const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = 'https://zobgyjsocqmzaggrnwqd.supabase.co'
const serviceRoleKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpvYmd5anNvY3FtemFnZ3Jud3FkIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NTE2NDc0OCwiZXhwIjoyMDYwNzQwNzQ4fQ.uQLNq8SzPYXqHmjj0sjzHjYuaLy6BsDAmIbIOvCEWlQ'

async function investigarSistemaMissoes() {
  console.log('üîç Investiga√ß√£o profunda: Sistema de cria√ß√£o de miss√µes...')
  
  const supabase = createClient(supabaseUrl, serviceRoleKey, {
    auth: { persistSession: false }
  })

  try {
    // 1. Buscar todas as tabelas relacionadas a templates/miss√µes
    console.log('\n1. Investigando templates e configura√ß√µes...')
    
    const tabelasPossiveis = [
      'missoes_templates',
      'templates_missoes', 
      'mission_templates',
      'missao_templates',
      'templates',
      'configuracao_missoes',
      'missoes_config',
      'agendamento_missoes',
      'jobs_missoes',
      'regras_missoes'
    ]

    for (const tabela of tabelasPossiveis) {
      try {
        const { data, error } = await supabase
          .from(tabela)
          .select('*')
          .limit(5)
        
        if (!error && data) {
          console.log(`‚úÖ Tabela ${tabela} encontrada:`)
          console.log(`   Registros: ${data.length}`)
          if (data.length > 0) {
            console.log(`   Campos: ${Object.keys(data[0]).join(', ')}`)
            console.log(`   Exemplo: ${JSON.stringify(data[0], null, 2)}`)
          }
        }
      } catch (e) {
        // Tabela n√£o existe, continuar
      }
    }

    // 2. Verificar se h√° alguma rela√ß√£o template_id nas miss√µes existentes
    console.log('\n2. Analisando template_id das miss√µes existentes...')
    
    const { data: missoesComTemplate, error: templateError } = await supabase
      .from('missoes_diarias')
      .select('template_id, data_missao, status, loja_id')
      .not('template_id', 'is', null)
      .limit(10)
    
    if (!templateError && missoesComTemplate) {
      console.log(`‚úÖ Encontradas ${missoesComTemplate.length} miss√µes com template_id`)
      
      // Buscar templates √∫nicos
      const templatesUnicos = [...new Set(missoesComTemplate.map(m => m.template_id))]
      console.log(`üìã Templates √∫nicos usados: ${templatesUnicos.length}`)
      
      // Tentar buscar os templates
      for (const templateId of templatesUnicos.slice(0, 3)) {
        try {
          const { data: template } = await supabase
            .from('missoes_templates')
            .select('*')
            .eq('id', templateId)
            .single()
          
          if (template) {
            console.log(`üéØ Template ${templateId}:`)
            console.log(`   Nome: ${template.nome || template.missao_nome || 'sem nome'}`)
            console.log(`   Tipo: ${template.tipo}`)
            console.log(`   Ativo: ${template.ativo}`)
            console.log(`   Frequencia: ${template.frequencia || 'n√£o definida'}`)
          }
        } catch (e) {
          console.log(`‚ùå Template ${templateId} n√£o encontrado em missoes_templates`)
        }
      }
    }

    // 3. Verificar fun√ß√µes/procedures do banco
    console.log('\n3. Verificando fun√ß√µes do banco...')
    
    try {
      // Verificar se existe fun√ß√£o gerar_missoes_diarias
      const { data: functions, error: funcError } = await supabase
        .from('information_schema.routines')
        .select('routine_name, routine_type')
        .eq('routine_schema', 'public')
        .ilike('routine_name', '%missao%')
      
      if (!funcError && functions && functions.length > 0) {
        console.log('‚úÖ Fun√ß√µes relacionadas a miss√µes encontradas:')
        functions.forEach(f => {
          console.log(`   - ${f.routine_name} (${f.routine_type})`)
        })
      } else {
        console.log('‚ùå Nenhuma fun√ß√£o relacionada a miss√µes encontrada')
      }
    } catch (e) {
      console.log('‚ùå Erro ao verificar fun√ß√µes:', e.message)
    }

    // Verificar outras fun√ß√µes poss√≠veis
    const funcoesPossiveis = [
      'create_daily_missions',
      'gerar_missoes',
      'criar_missoes_diarias',
      'populate_missions',
      'schedule_missions'
    ]

    for (const funcao of funcoesPossiveis) {
      try {
        const { data, error } = await supabase.rpc(funcao)
        if (!error) {
          console.log(`‚úÖ Fun√ß√£o ${funcao} existe e foi executada`)
        }
      } catch (e) {
        // Fun√ß√£o n√£o existe ou erro na execu√ß√£o
      }
    }

    // 4. Verificar cron jobs / triggers
    console.log('\n4. Verificando triggers e jobs autom√°ticos...')
    
    try {
      // Verificar se h√° triggers na tabela missoes_diarias
      const { data: triggers } = await supabase
        .from('information_schema.triggers')
        .select('*')
        .eq('event_object_table', 'missoes_diarias')
      
      if (triggers && triggers.length > 0) {
        console.log('‚úÖ Triggers encontrados em missoes_diarias:')
        triggers.forEach(t => {
          console.log(`   - ${t.trigger_name}: ${t.event_manipulation}`)
        })
      }
    } catch (e) {
      console.log('‚ùå N√£o foi poss√≠vel verificar triggers')
    }

    // 5. Verificar padr√µes de data nas miss√µes
    console.log('\n5. Analisando padr√µes de cria√ß√£o de miss√µes...')
    
    const { data: padroesDatas, error: dataError } = await supabase
      .from('missoes_diarias')
      .select('data_missao, created_at, criada_automaticamente')
      .order('created_at', { ascending: false })
      .limit(20)
    
    if (!dataError && padroesDatas) {
      console.log('üìÖ √öltimas miss√µes criadas:')
      padroesDatas.forEach(m => {
        const criacao = new Date(m.created_at).toLocaleString('pt-BR')
        console.log(`   ${m.data_missao} - Criada: ${criacao} - Auto: ${m.criada_automaticamente}`)
      })
      
      // Verificar gap entre √∫ltima miss√£o e hoje
      const ultimaData = padroesDatas[0]?.data_missao
      const hoje = new Date().toISOString().split('T')[0]
      
      if (ultimaData) {
        const diasDiferenca = Math.floor((new Date(hoje) - new Date(ultimaData)) / (1000 * 60 * 60 * 24))
        console.log(`\n‚ö†Ô∏è Gap identificado: ${diasDiferenca} dias entre √∫ltima miss√£o (${ultimaData}) e hoje (${hoje})`)
      }
    }

    // 6. Verificar configura√ß√µes de agendamento
    console.log('\n6. Verificando configura√ß√µes e jobs...')
    
    const tabelasConfig = [
      'pg_cron.job',
      'cron_jobs', 
      'schedulers',
      'job_schedules',
      'system_config'
    ]

    for (const tabela of tabelasConfig) {
      try {
        const { data, error } = await supabase
          .from(tabela)
          .select('*')
          .limit(5)
        
        if (!error && data) {
          console.log(`‚úÖ Tabela ${tabela} encontrada com ${data.length} registros`)
          if (data.length > 0) {
            console.log(`   Exemplo: ${JSON.stringify(data[0], null, 2)}`)
          }
        }
      } catch (e) {
        // Tabela n√£o existe
      }
    }

    console.log('\nüéØ Investiga√ß√£o conclu√≠da!')
    console.log('\nüí° Pr√≥ximos passos sugeridos:')
    console.log('   1. Verificar se h√° processo manual de cria√ß√£o de miss√µes')
    console.log('   2. Criar miss√µes para hoje baseado nos templates existentes')
    console.log('   3. Implementar job autom√°tico de cria√ß√£o di√°ria')

  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

investigarSistemaMissoes()