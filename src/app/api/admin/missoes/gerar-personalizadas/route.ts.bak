// üîÑ API Endpoint - Gerador de Miss√µes com Configura√ß√µes Personalizadas
// Integra√ß√£o com sistema de configura√ß√µes de hor√°rios e a√ß√µes por loja

import { NextRequest, NextResponse } from 'next/server';
// import { gerarMissoesPersonalizadas } from '@/lib/gerador-missoes-personalizadas'

// ========================================
// üéØ GERAR MISS√ïES PARA DATA ESPEC√çFICA
// ========================================

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { data, loja_id } = body;

    // Validar e processar data
    let dataProcessamento = new Date();
    if (data) {
      dataProcessamento = new Date(data);
      if (isNaN(dataProcessamento.getTime())) {
        return NextResponse.json({
          success: false,
          error: 'Data inv√°lida fornecida'
        }, { status: 400 });
      }
    }

    let resultado;

    if (loja_id) {
      // Gerar miss√µes para loja espec√≠fica
      const { gerarMissoesParaLojaEspecifica } = await import('@/lib/gerador-missoes-personalizadas');
      resultado = await gerarMissoesParaLojaEspecifica(loja_id, dataProcessamento);
    } else {
      // Gerar miss√µes para todas as lojas
      // resultado = await gerarMissoesComConfiguracoes(dataProcessamento);
      resultado = { sucesso: false, erro: 'Funcionalidade temporariamente desabilitada' }
    }

    if (resultado.sucesso) {
      return NextResponse.json({
        success: true,
        message: `Miss√µes geradas com sucesso para ${resultado.sucesso ? dataProcessamento.toISOString().split('T')[0] : 'data processamento'}! üéØ`,
        data: resultado
      });
    } else {
      return NextResponse.json({
        success: false,
        error: resultado.erro || 'Erro ao gerar miss√µes',
        data: resultado
      }, { status: 500 });
    }

  } catch (error) {
    console.error('‚ùå Erro no endpoint de gera√ß√£o de miss√µes:', error);
    return NextResponse.json({
      success: false,
      error: 'Erro interno do servidor'
    }, { status: 500 });
  }
}

// ========================================
// üìä OBTER RELAT√ìRIO DE CONFIGURA√á√ïES
// ========================================

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const tipo = searchParams.get('tipo') || 'configuracoes';

    if (tipo === 'configuracoes') {
      // Relat√≥rio de configura√ß√µes das lojas
      // const resultado = await obterRelatorioConfiguracoes();
      const resultado = { sucesso: true, configuracoes: [], total: 0 }

      if (resultado.sucesso) {
        return NextResponse.json({
          success: true,
          data: resultado
        });
      } else {
        return NextResponse.json({
          success: false,
          error: 'Funcionalidade temporariamente desabilitada'
        }, { status: 500 });
      }

    } else if (tipo === 'preview') {
      // Preview das miss√µes que seriam geradas hoje
      const hoje = new Date();
      // const resultado = await gerarMissoesComConfiguracoes(hoje);
      const resultado = { sucesso: false, erro: 'Funcionalidade temporariamente desabilitada' }

      // Simular gera√ß√£o sem inserir no banco
      return NextResponse.json({
        success: true,
        message: `Preview das miss√µes para ${hoje.toISOString().split('T')[0]}`,
        data: {
          ...resultado,
          preview: true,
          observacao: 'Este √© apenas um preview. Nenhuma miss√£o foi realmente criada.'
        }
      });

    } else {
      return NextResponse.json({
        success: false,
        error: 'Tipo de relat√≥rio n√£o suportado. Use "configuracoes" ou "preview".'
      }, { status: 400 });
    }

  } catch (error) {
    console.error('‚ùå Erro no endpoint de relat√≥rio:', error);
    return NextResponse.json({
      success: false,
      error: 'Erro interno do servidor'
    }, { status: 500 });
  }
}